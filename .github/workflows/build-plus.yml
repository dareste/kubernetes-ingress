name: Build Plus

on:
  workflow_call:
    inputs:
      platforms:
        required: true
        type: string
      image:
        required: true
        type: string
      tag:
        required: false
        type: string
      go-md5:
        required: true
        type: string
      base-image-md5:
        required: false
        type: string
      branch:
        required: false
        type: string
      forked-workflow:
        required: false
        type: boolean
      nap-modules:
        required: false
        type: string
      target:
        required: true
        type: string
    outputs:
      tag:
        description: "The tag that was built"
        value: ${{ jobs.build.outputs.tag }}
      digest:
        description: "The image digest"
        value: ${{ jobs.build.outputs.image_digest }}

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read # for docker/build-push-action to read repo content
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      id-token: write # for OIDC login to AWS
    runs-on: ubuntu-22.04
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build-push.outputs.digest }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
        with:
          platforms: arm64,s390x

      - name: Docker Buildx
        uses: docker/setup-buildx-action@2b51285047da1547ffb1b2203d8be4c0af6b1f20 # v3.2.0

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd1ccb9d54c0503c457c # v2.1.2
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCR_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GCR_SERVICE_ACCOUNT }}
        if: ${{ ! inputs.forked-workflow }}

      - name: Login to GCR
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
        if: ${{ ! inputs.forked-workflow }}

      - name: NAP modules
        id: nap_modules
        run: |
          [[ "${{ inputs.nap-modules }}" == "waf,dos" ]] && modules="waf-dos" || name="${{ inputs.nap-modules }}"
          [[ "${{ inputs.nap-modules }}" == "waf,dos" ]] && modules="both" || modules="${{ inputs.nap-modules }}"
          echo "modules=${modules}" >> $GITHUB_OUTPUT
          echo "name=${name}" >> $GITHUB_OUTPUT
        if: ${{ inputs.nap-modules != '' }}

      - name: Check if base images exist
        id: base_exists
        run: |
          if docker pull gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic-base/plus:${{ inputs.base-image-md5 }}-${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }}; then
            echo "exists=0" >> $GITHUB_OUTPUT
          else
            echo "exists=1" >> $GITHUB_OUTPUT
          fi
        if: ${{ ! inputs.forked-workflow }}

      - name: Build Base Container
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          file: build/Dockerfile
          context: "."
          cache-from: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }}
          cache-to: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }},mode=max
          target: common
          tags: gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic-base/plus:${{ inputs.base-image-md5 }}-${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }}
          platforms: ${{ inputs.platforms }}
          pull: true
          push: true
          build-args: |
            BUILD_OS=${{ inputs.image }}
            IC_VERSION=${{ steps.meta.outputs.version }}
            ${{ inputs.nap-modules != '' && format('NAP_MODULES={0}', steps.nap_modules.outputs.name) || '' }}
          secrets: |
            "nginx-repo.crt=${{ inputs.nap-modules != '' && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ inputs.nap-modules != '' && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}"
            ${{ inputs.nap-modules != '' && contains(inputs.image, 'ubi') && format('"rhel_license={0}"', secrets.RHEL_LICENSE) || '' }}
        if: ${{ ! inputs.forked-workflow && steps.base_exists.outputs.exists != 0 }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            name=gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic${{ contains(inputs.nap-modules, 'dos') && '-dos' || '' }}${{ contains(inputs.nap-modules, 'waf') && '-nap' || '' }}/nginx-plus-ingress
          flavor: |
            suffix=${{ contains(inputs.image, 'ubi') && '-ubi' || '' }}${{ contains(inputs.image, 'alpine') && '-alpine' || '' }}${{ contains(inputs.target, 'aws') && '-mktpl' || '' }}${{ contains(inputs.image, 'fips') && '-fips' || ''}}
          tags: |
            type=raw,value=${{ inputs.tag }}
          labels: |
            org.opencontainers.image.description=NGINX Plus Ingress Controller for Kubernetes
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Check if target image exists
        id: target_exists
        run: |
          if docker pull ${{ steps.meta.outputs.tags }}; then
            echo "exists=0" >> $GITHUB_OUTPUT
          else
            echo "exists=1" >> $GITHUB_OUTPUT
          fi
        if: ${{ ! inputs.forked-workflow }}

      - name: Fetch Cached Artifacts
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ inputs.go-md5 }}
        if: ${{ inputs.forked-workflow || steps.base_exists.outputs.exists != 0 || steps.target_exists.outputs.exists != 0 }}

      - name: Build Docker image
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        id: build-push
        with:
          file: build/Dockerfile
          context: "."
          cache-from: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }}
          cache-to: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }},mode=max
          target: ${{ inputs.target }}${{ ! inputs.forked-workflow && '-prebuilt' || '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: ${{ inputs.platforms }}
          load: ${{ github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/release-') }}
          push: ${{ ! inputs.forked-workflow }}
          pull: true
          no-cache: ${{ ! inputs.forked-workflow }}
          sbom: ${{ ! inputs.forked-workflow }}
          provenance: false
          build-args: |
            BUILD_OS=${{ inputs.image }}
            ${{ ! inputs.forked-workflow && format('PREBUILT_BASE_IMG=gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic-base/plus:{0}-{1}{2}', inputs.base-image-md5, inputs.image, steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '') || '' }}
            IC_VERSION=${{ steps.meta.outputs.version }}
            ${{ inputs.nap_modules != '' && format('NAP_MODULES={0}', steps.nap_modules.outputs.name) || '' }}
            ${{ (contains(inputs.target, 'aws') && inputs.nap_modules != '') && format('NAP_MODULES_AWS={0}', steps.nap_modules.outputs.modules) || '' }}
          secrets: |
            "nginx-repo.crt=${{ inputs.nap-modules != '' && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ inputs.nap-modules != '' && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}"
            ${{ contains(inputs.image, 'ubi') && format('"rhel_license={0}"', secrets.RHEL_LICENSE) || '' }}
        if: ${{ inputs.forked-workflow || steps.base_exists.outputs.exists != 0 || steps.target_exists.outputs.exists != 0 }}

      - name: Extract image name for Trivy
        id: trivy-tag
        run: |
          tag=$(echo $DOCKER_METADATA_OUTPUT_JSON | jq -r '[ .tags[] | select(contains("f5-gcs-7899"))] | .[0]')
          echo "tag=$tag" >> $GITHUB_OUTPUT
        if: ${{ ! inputs.forked-workflow && steps.build-push.conclusion == 'success' }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@d710430a6722f083d3b36b8339ff66b32f22ee55 # 0.19.0
        continue-on-error: true
        with:
          image-ref: ${{ steps.trivy-tag.outputs.tag }}
          format: "sarif"
          output: "trivy-results-${{ inputs.image }}.sarif"
          ignore-unfixed: "true"
        if: ${{ ! inputs.forked-workflow && steps.build-push.conclusion == 'success' }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@1b1aada464948af03b950897e5eb522f92603cc2 # v3.24.9
        continue-on-error: true
        with:
          sarif_file: "trivy-results-${{ inputs.image }}.sarif"
        if: ${{ ! inputs.forked-workflow && steps.build-push.conclusion == 'success' }}

      - name: Upload Scan Results
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        continue-on-error: true
        with:
          name: "trivy-results-${{ inputs.image }}.sarif"
          path: "trivy-results-${{ inputs.image }}.sarif"
        if: always()
